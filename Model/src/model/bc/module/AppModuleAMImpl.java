package model.bc.module;

import java.io.IOException;

import oracle.adf.share.ADFContext;
import model.bc.module.common.AppModuleAM;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Jun 10 14:49:07 EET 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleAMImpl extends ApplicationModuleImpl implements AppModuleAM {
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleAMImpl() {
    }


    public boolean checkLogin1(String userName, String password){
           
      System.out.println("check Login AM Method");
            boolean userFound = false;
            
            ADFContext.getCurrent().getSessionScope().put("PASSWORD", null);         
            ADFContext.getCurrent().getSessionScope().put("PATIENTNAME", null);
            ADFContext.getCurrent().getSessionScope().put("GENDER", null);
            
            if( !userName.isEmpty() && !password.isEmpty() ){

               
                
            ViewObject ADFUsersVO =  this.getPatientDataVo1().getViewObject();
                
                /// we need to check for user / pass using View Criteria    
                
              ViewCriteria ADFUsersVC = ADFUsersVO.createViewCriteria();
              ViewCriteriaRow ADFUsersVCR = ADFUsersVC.createViewCriteriaRow();
        
                ADFUsersVCR.setAttribute("PatientName", userName);                
                ADFUsersVCR.setAttribute("Password", password);                
               
                
                ADFUsersVC.insertRow(ADFUsersVCR);
                ADFUsersVO.applyViewCriteria(ADFUsersVC);
                
                ADFUsersVO.executeQuery();
                
                if(ADFUsersVO.getRowCount() > 0){ // User Found ok
                    userFound = true;

                // Retrieve Needed Data to be put on Session Scope
                    Row usersRow = ADFUsersVO.createRowSetIterator(null).next();
                    String PASSWORD = (String) usersRow.getAttribute("Password");
                    String PatientName = (String) usersRow.getAttribute("PatientName");
                    String Gender = (String) usersRow.getAttribute("Gender");
                            
                    System.out.println("password : "+PASSWORD);
                
                // put needed data on Session Scope
                ADFContext.getCurrent().getSessionScope().put("PASSWORD", PASSWORD);
                ADFContext.getCurrent().getSessionScope().put("PATIENTNAME", PatientName);
                ADFContext.getCurrent().getSessionScope().put("GENDER", Gender);
                
                    getAllUserData1(PatientName,PASSWORD,Gender);
                    
                 
                }else{
                       // user not found
                
                    throw new JboException("Invalid user or pass");
                    }
            }else{
                
                 /// user or pass fields are empty           
               throw new JboException("User Name or password should be entered");
               
            }
            
            return userFound;
        }
    public boolean checkLogin2(String userName, String password){
           
      System.out.println("check Login AM Method");
            boolean userFound = false;
            
            ADFContext.getCurrent().getSessionScope().put("PASSWORD", null);         
            ADFContext.getCurrent().getSessionScope().put("DOCTORNAME", null);
            ADFContext.getCurrent().getSessionScope().put("GENDER", null);
            
            if( !userName.isEmpty() && !password.isEmpty() ){

               
                
            ViewObject ADFUsersVO =  this.getDoctorDataVo1().getViewObject();
                
                /// we need to check for user / pass using View Criteria    
                
              ViewCriteria ADFUsersVC = ADFUsersVO.createViewCriteria();
              ViewCriteriaRow ADFUsersVCR = ADFUsersVC.createViewCriteriaRow();
        
                ADFUsersVCR.setAttribute("DoctorName", userName);                
                ADFUsersVCR.setAttribute("Password", password);                
               
                
                ADFUsersVC.insertRow(ADFUsersVCR);
                ADFUsersVO.applyViewCriteria(ADFUsersVC);
                
                ADFUsersVO.executeQuery();
                
                if(ADFUsersVO.getRowCount() > 0){ // User Found ok
                    userFound = true;

                // Retrieve Needed Data to be put on Session Scope
                    Row usersRow = ADFUsersVO.createRowSetIterator(null).next();
                    String PASSWORD = (String) usersRow.getAttribute("Password");
                    String DoctorName = (String) usersRow.getAttribute("DoctorName");
                    String Gender = (String) usersRow.getAttribute("Gender");
                            
                    System.out.println("password : "+PASSWORD);
                
                // put needed data on Session Scope
                ADFContext.getCurrent().getSessionScope().put("PASSWORD", PASSWORD);
                ADFContext.getCurrent().getSessionScope().put("PATIENTNAME", DoctorName);
                ADFContext.getCurrent().getSessionScope().put("GENDER", Gender);
                
                    getAllUserData2(DoctorName,PASSWORD,Gender);
                 
                }else{
                       // user not found
                
                    throw new JboException("Invalid user or pass");
                    }
            }else{
                
                 /// user or pass fields are empty           
               throw new JboException("User Name or password should be entered");
               
            }
            
            return userFound;
        }
    
    
    public void getAllUserData1(String PatientName,String PASSWORD,String Gender){
        

            /// try to read userDetails VO
            ViewObject userDetails = this.getPatientDataVo1();
            
            userDetails.executeQuery();
            Row userDetailsRow = userDetails.createRowSetIterator(null).next();
          
            String patientgender = (String) userDetailsRow.getAttribute("Gender");
           
            int age =(Integer.parseInt(userDetailsRow.getAttribute("Age").toString()));
            String email = (String) userDetailsRow.getAttribute("Email");
            DBSequence id=(DBSequence)userDetailsRow.getAttribute("PatientId");
             
            
            

            User1 user = new User1( PatientName,PASSWORD,patientgender,email,age,id);
            System.out.println("User  NAme : "+user.getPatientName());
            // put user Object on Session Scope
            ADFContext.getCurrent().getSessionScope().put("USER", user);
            
            user = (User1) ADFContext.getCurrent().getSessionScope().get("USER");
                System.out.println("get session user ok");
                
            
                
            System.out.println("patient Name: " + PatientName);
            System.out.println("Phone Num : "+PASSWORD);
        }

    public void getAllUserData2(String DoctorName,String PASSWORD,String Gender){
        

            /// try to read userDetails VO
            ViewObject userDetails = this.getDoctorDataVo1();
            userDetails.executeQuery();
            Row userDetailsRow = userDetails.createRowSetIterator(null).next();
          
            String doctorgender = (String) userDetailsRow.getAttribute("Gender");
          
            String email = (String) userDetailsRow.getAttribute("Email");
           
            int age =(Integer.parseInt(userDetailsRow.getAttribute("Age").toString()));
            DBSequence id=(DBSequence)userDetailsRow.getAttribute("DaoctorId");
            String disease =(String) userDetailsRow.getAttribute("DoctorSpecialization");

            User2 user = new User2( DoctorName,PASSWORD,doctorgender,email,age,id,disease);
            System.out.println("User  NAme : "+user.getDoctorName());
            // put user Object on Session Scope
            ADFContext.getCurrent().getSessionScope().put("USER", user);
            
            user = (User2) ADFContext.getCurrent().getSessionScope().get("USER");
                System.out.println("get session user ok");
                
            
                
            System.out.println("Doctor Name: " + DoctorName);
            System.out.println("password: "+PASSWORD);
        }

    /**
     * Container's getter for DoctorDataVo1.
     * @return DoctorDataVo1
     */


    /**
     * Container's getter for BrowseMessageVo1.
     * @return BrowseMessageVo1
     */
    public ViewObjectImpl getBrowseMessageVo1() {
        return (ViewObjectImpl) findViewObject("BrowseMessageVo1");
    }

    /**
     * Container's getter for CancerDocVo1.
     * @return CancerDocVo1
     */
    public ViewObjectImpl getCancerDocVo1() {
        return (ViewObjectImpl) findViewObject("CancerDocVo1");
    }

    /**
     * Container's getter for choosenMessageVo1.
     * @return choosenMessageVo1
     */
    public ViewObjectImpl getchoosenMessageVo1() {
        return (ViewObjectImpl) findViewObject("choosenMessageVo1");
    }

    /**
     * Container's getter for DocResVo1.
     * @return DocResVo1
     */
    public ViewObjectImpl getDocResVo1() {
        return (ViewObjectImpl) findViewObject("DocResVo1");
    }

    /**
     * Container's getter for GenderDropDown1.
     * @return GenderDropDown1
     */
    public ViewObjectImpl getGenderDropDown1() {
        return (ViewObjectImpl) findViewObject("GenderDropDown1");
    }

    /**
     * Container's getter for MessageVo1.
     * @return MessageVo1
     */
    public ViewObjectImpl getMessageVo1() {
        return (ViewObjectImpl) findViewObject("MessageVo1");
    }


    /**
     * Container's getter for ResInfoVo1.
     * @return ResInfoVo1
     */
    public ViewObjectImpl getResInfoVo1() {
        return (ViewObjectImpl) findViewObject("ResInfoVo1");
    }

    /**
     * Container's getter for SensInfoVo1.
     * @return SensInfoVo1
     */
    public ViewObjectImpl getSensInfoVo1() {
        return (ViewObjectImpl) findViewObject("SensInfoVo1");
    }

    /**
     * Container's getter for SugarDoctorVo1.
     * @return SugarDoctorVo1
     */
    public ViewObjectImpl getSugarDoctorVo1() {
        return (ViewObjectImpl) findViewObject("SugarDoctorVo1");
    }

    /**
     * Container's getter for VirusCVo1.
     * @return VirusCVo1
     */
    public ViewObjectImpl getVirusCVo1() {
        return (ViewObjectImpl) findViewObject("VirusCVo1");
    }

    /**
     * Container's getter for choosenDoctorDataVo1.
     * @return choosenDoctorDataVo1
     */
    public ViewObjectImpl getchoosenDoctorDataVo1() {
        return (ViewObjectImpl) findViewObject("choosenDoctorDataVo1");
    }

    /**
     * Container's getter for DoctorDataVo1.
     * @return DoctorDataVo1
     */
    public ViewObjectImpl getDoctorDataVo1() {
        return (ViewObjectImpl) findViewObject("DoctorDataVo1");
    }


    /**
     * Container's getter for PatientDataVo1.
     * @return PatientDataVo1
     */
    public ViewObjectImpl getPatientDataVo1() {
        return (ViewObjectImpl) findViewObject("PatientDataVo1");
    }
}

